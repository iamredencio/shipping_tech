# Dockerfile.frontend

# 1. Base Image: Use an official Node.js image.
# Use a specific LTS version for stability (e.g., node:18-alpine, node:20-alpine)
# Alpine versions are smaller.
FROM node:18-alpine AS base

# Set working directory
WORKDIR /app

# 2. Install Dependencies
# Copy package.json and lock file
COPY package.json yarn.lock* package-lock.json* ./
# Install dependencies using yarn or npm
# Use --frozen-lockfile for reproducible installs
RUN yarn install --frozen-lockfile || npm ci

# 3. Copy Application Code
COPY . .

# 4. Build the Next.js Application
# This creates an optimized production build
RUN npm run build

# 5. Production Stage
# Use a smaller base image for the final production image
FROM node:18-alpine AS production

WORKDIR /app

# Copy built assets from the build stage
COPY --from=base /app/.next ./.next
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/package.json ./package.json
COPY --from=base /app/public ./public

# Expose the port the app runs on
EXPOSE 3000

# Command to run the production server
CMD ["npm", "start"] 